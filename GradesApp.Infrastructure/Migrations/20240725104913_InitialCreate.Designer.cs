// <auto-generated />
using System;
using GradesApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GradesApp.Infrastructure.Migrations
{
    [DbContext(typeof(GradesAppDbContext))]
    [Migration("20240725104913_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GradesApp.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SemesterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Faculty");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eaa3d334-382e-4989-a049-db2ad27131d7"),
                            Name = "Faculty of Science"
                        });
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("GradeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Group");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cd41be8e-be64-4979-a658-fe9be7a586f6"),
                            Name = "CS-2",
                            SpecialityId = new Guid("cc17ea1b-a4fc-4d55-9f78-02120a2bdbd6"),
                            Year = 2
                        },
                        new
                        {
                            Id = new Guid("1a266c5b-8b13-4c29-8d02-a279684ef7e2"),
                            Name = "MATH-3",
                            SpecialityId = new Guid("f421e6c2-c529-4c38-90f5-c2e6bea905be"),
                            Year = 3
                        });
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Semester");
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Speciality");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc17ea1b-a4fc-4d55-9f78-02120a2bdbd6"),
                            Code = "CS",
                            FacultyId = new Guid("eaa3d334-382e-4989-a049-db2ad27131d7"),
                            Name = "Computer Science"
                        },
                        new
                        {
                            Id = new Guid("f421e6c2-c529-4c38-90f5-c2e6bea905be"),
                            Code = "MATH",
                            FacultyId = new Guid("eaa3d334-382e-4989-a049-db2ad27131d7"),
                            Name = "Mathematics"
                        });
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("uuid");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71bb2e72-f9ee-4c49-8235-e5f67d026426"),
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnrollmentDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FirstName = "John",
                            GroupId = new Guid("cd41be8e-be64-4979-a658-fe9be7a586f6"),
                            LastName = "Doe",
                            SpecialityId = new Guid("cc17ea1b-a4fc-4d55-9f78-02120a2bdbd6"),
                            StudentNumber = "CS001",
                            UserId = new Guid("c4223075-bcba-47e1-8fd0-12bd5fb96cd1")
                        },
                        new
                        {
                            Id = new Guid("f725d6a7-5fb1-42b2-b2c2-38016854644c"),
                            DateOfBirth = new DateTime(1999, 5, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnrollmentDate = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FirstName = "Jane",
                            GroupId = new Guid("1a266c5b-8b13-4c29-8d02-a279684ef7e2"),
                            LastName = "Smith",
                            SpecialityId = new Guid("f421e6c2-c529-4c38-90f5-c2e6bea905be"),
                            StudentNumber = "MATH001",
                            UserId = new Guid("07149b74-47a8-431f-8d79-82000215bd49")
                        });
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4223075-bcba-47e1-8fd0-12bd5fb96cd1"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john@example.com",
                            PasswordHash = "$2a$11$9baz8IRe6VFTDE9KWlXpwOcD5wsxt1QZjjFVI2hWHtrbxsAzOVs/K",
                            Role = "Student",
                            Username = "john_doe"
                        },
                        new
                        {
                            Id = new Guid("07149b74-47a8-431f-8d79-82000215bd49"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane@example.com",
                            PasswordHash = "$2a$11$pMfWK9MxeTY11Z17f.Jg9OVtRMQYC5gGyzaOijL.0hY2tordtiOnC",
                            Role = "Student",
                            Username = "jane_smith"
                        });
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Course", b =>
                {
                    b.HasOne("GradesApp.Domain.Entities.Semester", "Semester")
                        .WithMany("Courses")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Grade", b =>
                {
                    b.HasOne("GradesApp.Domain.Entities.Course", "Course")
                        .WithMany("Grades")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GradesApp.Domain.Entities.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Group", b =>
                {
                    b.HasOne("GradesApp.Domain.Entities.Speciality", "Speciality")
                        .WithMany("Groups")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Speciality", b =>
                {
                    b.HasOne("GradesApp.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Specialities")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Student", b =>
                {
                    b.HasOne("GradesApp.Domain.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GradesApp.Domain.Entities.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GradesApp.Domain.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("GradesApp.Domain.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Speciality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Course", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Faculty", b =>
                {
                    b.Navigation("Specialities");
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Semester", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Speciality", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("GradesApp.Domain.Entities.Student", b =>
                {
                    b.Navigation("Grades");
                });
#pragma warning restore 612, 618
        }
    }
}
